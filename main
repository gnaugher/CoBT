class ChampionCard:
    def __init__(self, name, primaryelement, attackvalue, defensevalue, attackmultiplierav, attackmultiplier, defensivemultiplier, defensivemultiplierav, hp):
        self.name = name
        self.primaryelement = primaryelement
        self.attackvalue = attackvalue
        self.defensevalue = defensevalue
        self.attackmultiplierav = attackmultiplierav
        self.attackmultiplier = attackmultiplier
        self.defensivemultiplier = defensivemultiplier
        self.defensivemultiplierav = defensivemultiplierav
        self.hp = hp

#DefineTheChampions        
DarkWater = ChampionCard("DarkWater", "Water", 5, 5, "Yes", "Ice", "Fire", "Yes", 100)
Poison = ChampionCard("Poison", "Ice", 5, 5, "Yes","Space", "Water", "Yes",100)
Love = ChampionCard("Love", "Space", 1, 9,"Yes", "Fire", "Ice","Yes", 100)
DarkWind = ChampionCard("DarkWind", "Wind", 9, 1, "Yes", "Earth", "Fire", "Yes", 100)
DarkEarth = ChampionCard("DarkEarth", "Earth", 8, 2, "Yes","Ice", "Fire", "Yes",100)
LightGold = ChampionCard("LightGold", "Fire", 4, 6, "Yes", "Water", "Earth", "Yes", 100)
Fire = ChampionCard("Fire", "Fire", 7, 2, "Yes","Ice", "Fire","Yes", 100)
Water = ChampionCard("Water", "Water", 3, 7, "Yes","Space", "Water","Yes", 100)
Earth = ChampionCard("Earth", "Earth", 5, 5, "Yes","Fire", "Ice", "Yes",100)
Ice = ChampionCard("Ice", "Ice", 4, 6, "Yes","Earth", "Fire","Yes", 100)
Wind = ChampionCard("Wind", "Wind", 8, 2, "Yes","Ice", "Fire", "Yes",100)
Lightening = ChampionCard("Lightening", "Fire", 4, 6, "Yes","Water", "Earth","Yes", 100)
Lava = ChampionCard("Lava", "Fire", 9, 1,"Yes", "Ice", "Fire", "Yes",100)
Metal = ChampionCard("Metal", "Earth", 4, 6,"Yes", "Space", "Water","Yes", 100)
Dark = ChampionCard("Dark", "Space", 1, 9, "Yes","Fire", "Ice", "Yes",100)
DarkFire = ChampionCard("DarkWind", "Water", 2, 7, "Yes","Earth", "Fire","Yes", 100)
Brick = ChampionCard("Brick", "Earth", 8, 2, "Yes","Ice", "Fire","Yes", 100)
Gold = ChampionCard("Gold", "Earth", 5, 5, "Yes","Water", "Earth", "Yes",100)


#SelectFirstChampion
#primaryelementselect = input("Type the main element you wish to use: Water, Ice, Space, Wind, Earth, Fire ")


#Prompt For First Champion
##from tkinter import *
##
##top = Tk()
##mb = Menubutton ( top, text = 'text')
##mb.grid()
##mb.menu = Menu ( mb, tearoff = 0 )
##mb['menu'] = mb.menu
##cVar = IntVar()
##aVar = IntVar()
##mb.menu.add_checkbutton ( label ='Contact', variable = cVar )
##mb.menu.add_checkbutton ( label = 'About', variable = aVar )
##mb.pack()
##top.mainloop()





firstchampion = DarkWind
#NameThefirstChampion
print("Name -", firstchampion.name, " - Primary Element", firstchampion.primaryelement, " - Attack Value", firstchampion.attackvalue, " - Defensive Value", firstchampion.defensevalue, " - Attack Multiplier,", firstchampion.attackmultiplier, " - Defense Multiplier,", firstchampion.defensivemultiplier)


#Prompt For Second Champion
secondchampion = LightGold
print("Name -", secondchampion.name, " - Primary Element", secondchampion.primaryelement, " - Attack Value", secondchampion.attackvalue, " - Defensive Value", secondchampion.defensevalue, " - Attack Multiplier,", secondchampion.attackmultiplier, " - Defense Multiplier,", secondchampion.defensivemultiplier)

#Set champion HP
firstchamphp = firstchampion.hp
secondchamphp = secondchampion.hp


#Start the round
turns = range(1, 5)
attackmultiplierinv = 1

#Attack\Defense Value Computation

def battlecalcoff(championbattlecalco):
    #Offense Turn
    #Flip The Coin
    import random

    #Can I Attack
    baseattackvalue = 0
    def cointoss():
        return random.choice(["Yes", "No"])

    #How powerful is the attack
    def diceroll():
        return random.randint(1,6)

    CanIAttack = cointoss()

    AttackMultiplier = diceroll()

    if CanIAttack == "Yes":
     
     baseattackvalue = championbattlecalco.attackvalue * AttackMultiplier
     print(championbattlecalco.name, "rolls a", AttackMultiplier,  "has", championbattlecalco.attackvalue, "attack")
     print("Base attack is", baseattackvalue)
    elif CanIAttack == "No":
     print(championbattlecalco.name, "can't attack, attack value is 0")
     baseattackvalue = 0

    
    return baseattackvalue, CanIAttack, AttackMultiplier
    
#Defense Turn
def battlecalcdef(championbattlecalcd):
    basedefensevalue = 0
    totaldefensevalue = 0

    import random
    
    def cointoss():
        return random.choice(["Yes", "No"])

    def diceroll():
        return random.randint(1,6)

    CanIDefend = cointoss()

    DefenseMultiplier = diceroll()

    if CanIDefend == "Yes":
     
     basedefensevalue = championbattlecalcd.defensevalue * DefenseMultiplier
     
     print(championbattlecalcd.name, "rolls a", DefenseMultiplier, "and has", championbattlecalcd.defensevalue, "defense")
     print("Base defense is", basedefensevalue)
     
    elif CanIDefend == "No":
     print(championbattlecalcd.name, "fails to defend themself defense value is 0")
     basedefensevalue = 0
 
    
    return basedefensevalue, CanIDefend, DefenseMultiplier




#Determine the elemental attack multipliers
def elementattackmulticalc(firstchampion, secondchampion, baseattackvaluefirstchamp, basedefensevaluesecondchamp):
 totalattackvalue=baseattackvaluefirstchamp
 
 if firstchampion.attackmultiplier == secondchampion.primaryelement:
  totalattackvalue = baseattackvaluefirstchamp * 2

 
 else:
  
  totalattackvalue = baseattackvaluefirstchamp
 #Determine the defensive elemental multiplier
 if firstchampion.primaryelement == secondchampion.defensivemultiplier:
  totaldefensevalue = basedefensevaluesecondchamp * 2

 else:
  totaldefensevalue = basedefensevaluesecondchamp 

 return totalattackvalue, totaldefensevalue


#Define the Power Eggs
class PowerEgg:
    def __init__(self, refno, description):
        self.refno = refno
        self.description = description


#DefineThePowerEggs
PowerStrike = PowerEgg("1", "This attack is worth 50% of your opponents health.")
DoubleAttack = PowerEgg("2", "Double your attack value, use it to strike.")
DoubleDefAttack = PowerEgg("3", "Double your defense value, use it to attack.")
MirrorAttack = PowerEgg("4", "Take your opponents attack value.")
RegainHP = PowerEgg("5", "Regain 20 HP.")
SwitchHP = PowerEgg("6", "Switch remaining HP with your opponent.")
PoisonAttack = PowerEgg("7", "Opponent loses 20HP, you lose 10HP.")
CombinedAttack = PowerEgg("8", "Combine the attack values of attacker and defender.")
RestoreElementalMulti = PowerEgg("9", "Reset Elemental Multiplier.")
InstaKO = PowerEgg("10", "Roll a 6 and instantly knock out your opponent.")

poweregglib = [PowerStrike, DoubleAttack, DoubleDefAttack, MirrorAttack, RegainHP, SwitchHP, PoisonAttack, CombinedAttack, RestoreElementalMulti, InstaKO]  
 
def combat(firstchampion, secondchampion, ftotalattackno, stotaldefno, firstchamphp, secondchamphp, poweregglib):
    #print(firstchampion.name, "enters the turn with", firstchamphp, secondchampion.name, "enters the turn with", secondchamphp)
    print(firstchampion.name ,"attacks", secondchampion.name, "with", ftotalattackno, secondchampion.name, "defends with", stotaldefno)

    if ftotalattackno == 0 and stotaldefno == 0:
        
        print("Draw a Power Egg")
        import random
        powereggrefno = random.randint(1,10)
        
        print(firstchampion.name, "pulled Power Egg number",powereggrefno, poweregglib[powereggrefno].description, "!")

        powereggrefno = random.randint(1,10)
        print(secondchampion.name, "pulled Power Egg number",powereggrefno, poweregglib[powereggrefno].description, "!")
        
    elif ftotalattackno > stotaldefno:
      #print("Attack higher than defense, run first condition")
      damage = ftotalattackno - stotaldefno
      print(secondchampion.name,"loses", damage, "HP")
      secondchamphp = secondchamphp - damage
      #print(secondchamphp, "HP remaining for", secondchampion.name)
    else:
        #print("Defense higher than attack, run second condition")
        damage = stotaldefno - ftotalattackno
        print(firstchampion.name,"loses", damage, "HP")
        firstchamphp = firstchamphp - damage
        #print(firstchamphp, "HP remaining for", firstchampion.name)
    return firstchamphp, secondchamphp

##Engage Combat
firstchamphp = firstchampion.hp
secondchamphp = secondchampion.hp


#Gameplay
for turn in turns:
    #input("Press Enter to Roll...")
    if firstchamphp <= 0 or secondchamphp <= 0:
        if firstchamphp <= 0:
            print(firstchampion.name, "is knocked out, ", secondchampion.name, "wins!!!")
        else:
            print(secondchampion.name, "is knocked out, ", firstchampion.name, "wins!!!")
            
        break



    else:

        #ImportMessageBoxCode
        import ctypes  # An included library with Python install.
        def Mbox(title, text, style):
            return ctypes.windll.user32.MessageBoxW(0, text, title, style)
        x = Mbox('Welcome', 'Are you ready to Battle?', 4)
        if x == 7:
            break
        
        print("Turn number", turn)

        
        if (turn % 2) != 0:
            
            print(firstchampion.name, "enters the turn with", firstchamphp, secondchampion.name, "enters the turn with", secondchamphp)
            
            baseattackvaluefirstchamp, caniattack1, attackmultiplier = battlecalcoff(firstchampion)

            basedefensevaluesecondchamp, canidefend2, defensemultiplier = battlecalcdef(secondchampion)
                    
            ftotalattackno, stotaldefno = elementattackmulticalc(firstchampion, secondchampion, baseattackvaluefirstchamp, basedefensevaluesecondchamp)
            combatoutcome = combat(firstchampion, secondchampion, ftotalattackno, stotaldefno, firstchamphp, secondchamphp, poweregglib)
            firstchamphp = combatoutcome[0]
            secondchamphp = combatoutcome[1]
        else:
            print(secondchampion.name, "enters the turn with", secondchamphp, firstchampion.name, "enters the turn with", firstchamphp, )
            baseattackvaluefirstchamp, caniattack1, attackmultiplier = battlecalcoff(secondchampion)

            basedefensevaluesecondchamp, canidefend2, defensemultiplier = battlecalcdef(firstchampion)
                    
            ftotalattackno, stotaldefno = elementattackmulticalc(firstchampion, secondchampion, baseattackvaluefirstchamp, basedefensevaluesecondchamp)

            combatoutcome = combat(secondchampion, firstchampion, ftotalattackno, stotaldefno,secondchamphp, firstchamphp, poweregglib)
            firstchamphp = combatoutcome[1]
            secondchamphp = combatoutcome[0]



print(firstchampion.name, "has", firstchamphp, secondchampion.name, "has", secondchamphp)
print("The round is over.")
